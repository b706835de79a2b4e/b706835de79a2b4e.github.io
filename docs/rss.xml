<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>技术分享博客</title><link>https://b706835de79a2b4e.github.io</link><description>分享技术、分享资源</description><copyright>技术分享博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://github.githubassets.com/favicons/favicon.svg</url><title>avatar</title><link>https://b706835de79a2b4e.github.io</link></image><lastBuildDate>Tue, 09 Jul 2024 07:01:28 +0000</lastBuildDate><managingEditor>技术分享博客</managingEditor><ttl>60</ttl><webMaster>技术分享博客</webMaster><item><title>use JavaScript write Telegram bot code , can deploy to Cloudflare Worker</title><link>https://b706835de79a2b4e.github.io/post/use%20JavaScript%20write%20Telegram%20bot%20code%20%2C%20can%20deploy%20to%20Cloudflare%20Worker.html</link><description>**Here's the JavaScript code for a basic Telegram bot that you can deploy to Cloudflare Worker:**&#13;
&#13;
~~~javascript&#13;
import { KVNamespace } from 'cloudflare-workers';&#13;
&#13;
// Replace with your Telegram bot token&#13;
const BOT_TOKEN = 'YOUR_BOT_TOKEN';&#13;
&#13;
// Create a KV Namespace for storing bot state&#13;
const kv = new KVNamespace('bot-state');&#13;
&#13;
// Function to send a message to a chat&#13;
async function sendMessage(chatId, message) {&#13;
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;&#13;
  const body = new URLSearchParams({&#13;
    chat_id: chatId,&#13;
    text: message,&#13;
  });&#13;
  await fetch(url, {&#13;
    method: 'POST',&#13;
    body,&#13;
  });&#13;
}&#13;
&#13;
// Function to handle incoming Telegram updates&#13;
async function handleUpdate(update) {&#13;
  const chatId = update.message.chat.id;&#13;
  const message = update.message.text;&#13;
&#13;
  // Simple echo functionality - respond with the same message&#13;
  await sendMessage(chatId, message);&#13;
&#13;
  // You can add more logic here to handle different messages&#13;
  // and implement more complex bot functionalities&#13;
}&#13;
&#13;
// Handle HTTP requests&#13;
addEventListener('fetch', async event =&gt; {&#13;
  const request = event.request;&#13;
&#13;
  if (request.method === 'POST') {&#13;
    const data = await request.json();&#13;
    const update = data.update;&#13;
&#13;
    // Update bot state if needed (e.g., storing chat history)&#13;
    // await kv.put('chatHistory', JSON.stringify(update));&#13;
&#13;
    await handleUpdate(update);&#13;
&#13;
    return new Response('OK');&#13;
  } else {&#13;
    return new Response('Method Not Allowed', { status: 405 });&#13;
  }&#13;
});&#13;
&#13;
~~~&#13;
&#13;
**Explanation:**&#13;
&#13;
- Imports: Imports KVNamespace from cloudflare-workers for storing bot state.&#13;
   - Bot Token: Replace YOUR_BOT_TOKEN with your actual Telegram bot token obtained from [@BotFather](https://core.telegram.org/bots#6-botfather).&#13;
- `sendMessage` Function: Sends a message to a chat using Telegram Bot API.&#13;
- `handleUpdate` Function: Processes incoming Telegram updates (messages in this case).&#13;
   - Extracts chat ID and message text.&#13;
   - Currently implements a simple echo functionality (responds with the same message).&#13;
   - You can modify this to handle different messages and implement more complex logic.&#13;
- Event Listener: Listens for incoming HTTP requests.&#13;
   - Only handles POST requests containing Telegram updates in JSON format.&#13;
   - Calls handleUpdate to process the update.&#13;
&#13;
**Deployment:**&#13;
&#13;
1. Replace `YOUR_BOT_TOKEN` with your actual token.&#13;
2. Copy the code and deploy it to your Cloudflare Worker.&#13;
3. Set up a webhook for your Telegram bot using the URL of your deployed Worker. You can find instructions on setting webhooks in the Telegram Bot API documentation (https://core.telegram.org/).&#13;
&#13;
**Note:**&#13;
&#13;
- This is a basic example and doesn't include features like error handling, user state management, or advanced functionality. You'll need to extend it based on your specific requirements.&#13;
- Make sure to enable KV storage in your Cloudflare Worker settings if you plan to use it for bot state.。</description><guid isPermaLink="true">https://b706835de79a2b4e.github.io/post/use%20JavaScript%20write%20Telegram%20bot%20code%20%2C%20can%20deploy%20to%20Cloudflare%20Worker.html</guid><pubDate>Tue, 09 Jul 2024 07:01:03 +0000</pubDate></item><item><title>test 1</title><link>https://b706835de79a2b4e.github.io/post/test%201.html</link><description>test post 1。</description><guid isPermaLink="true">https://b706835de79a2b4e.github.io/post/test%201.html</guid><pubDate>Fri, 05 Jul 2024 05:45:13 +0000</pubDate></item></channel></rss>